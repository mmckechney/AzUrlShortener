@page "/Urls"
@using adminBlazorWebsite.Data
@inject UrlShortenerService UrlService
@inject IJSRuntime JSRuntime;
@attribute [Authorize(Roles = "admin")]


@if (UrlList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary"
            @onclick="CreateShortUrl">
        Add New Url
    </button>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Vanity</th>
                <th>Title</th>
                <th>Url</th>
                <th>Clicks</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var url in UrlList.UrlList)
            {
                <tr>
                    <td><button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => CopyToClipboardAsync(url.ShortUrl))">Copy</button></td>
                    <td><a href="@url.ShortUrl" target="blank">@url.RowKey</a></td>
                    <td>
                        <span>@url.Title</span>
                    </td>
                    <td>
                        <span title="@url.Url">@url.GetDisplayableUrl()</span>
                    </td>
                    <td>@url.Clicks</td>
                    <td><button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => EditShortUrl(url))">Edit</button></td>
                    <td><button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => ArchiveShortUrl(url))">Archive</button></td>
                </tr>
            }
        </tbody>
    </table>
    <p>
        <!-- Add a new ShortUrl -->
        <button class="btn btn-primary"
                @onclick="CreateShortUrl">
            Add New Url
        </button>
    </p>
}

@if (ShowCreatePopup)
{
    <Modal Title="Short Url Request" ClosePopup="ClosePopup">
        <EditForm Model="shortUrlRequest" OnValidSubmit="SaveShortUrl">
            <DataAnnotationsValidator />
            <div>
                <label for="title">Title</label>
                <InputText id="title" class="form-control" placeholder="Title or description for this URL" @bind-Value="shortUrlRequest.Title" />
                <ValidationMessage For="@(() => shortUrlRequest.Title)" />
            </div>
            <br />
            <div>
                <label for="url">The Url to redirect</label>
                <InputText id="url" class="form-control" placeholder="The Url to redirect" @bind-Value="shortUrlRequest.Url" />
                <ValidationMessage For="@(() => shortUrlRequest.Url)" />
            </div>
            <br />
            <div>
                <label for="vanity">Vanity</label>
                <InputText id="vanity" class="form-control" placeholder="Vanity or the 'End' part of the Url" @bind-Value="shortUrlRequest.Vanity" />
                <ValidationMessage For="@(() => shortUrlRequest.Vanity)" />
            </div>
            <button class="btn btn-primary" type="submit">
                Save
            </button>
        </EditForm>
    </Modal>
}


@if (ShowEditPopup)
{
    <Modal Title="Edit Short Url" ClosePopup="ClosePopup">
        <EditForm Model="editedUrl" OnValidSubmit="SaveUpdatedShortUrl">
            <DataAnnotationsValidator />
            <div>
                <label for="edit-title">Title</label>
                <InputText id="edit-title" class="form-control" placeholder="Title or description for this URL" @bind-Value="editedUrl.Title" />
                <ValidationMessage For="@(() => editedUrl.Title)" />
            </div>
            <br />
            <div>
                <label for="edit-url">The Url to redirect</label>
                <InputText id="edit-url" class="form-control" placeholder="The Url to redirect" @bind-Value="editedUrl.Url" />
                <ValidationMessage For="@(() => editedUrl.Url)" />
            </div>
            <button class="btn btn-primary" type="submit">
                Save
            </button>
        </EditForm>
    </Modal>
}

@if (ShowErrorPopup)
{
    <Modal Title="Error" ClosePopup="ClosePopup">
        <h2>There was a problem:</h2>
        <p>@errorMessage</p>
    </Modal>
}




@code
{
    bool ShowCreatePopup = false;
    bool ShowEditPopup = false;
    bool ShowErrorPopup = false;
    ShortUrlRequest shortUrlRequest = new ShortUrlRequest();
    ShortUrlEntity editedUrl;
    ShortUrlList UrlList;
    string errorMessage = string.Empty;

    void ClosePopup()
    {
        ShowCreatePopup = false;
        ShowEditPopup = false;
        ShowErrorPopup = false;
    }
    private async Task SaveShortUrl()
    {
        ShowCreatePopup = false;
        await UrlService.CreateShortUrl(shortUrlRequest);
        try
        {
            UrlList = await UrlService.GetUrlList();
        }
        catch(Exception exe)
        {
            errorMessage = exe.Message;
            ShowErrorPopup = true;
        }
    }

    private async Task SaveUpdatedShortUrl()
    {
        ShowEditPopup = false;

        try
        {
            await UrlService.UpdateShortUrl(editedUrl);
            UrlList = await UrlService.GetUrlList();
        }
        catch (Exception exe)
        {
            errorMessage = exe.Message;
            ShowErrorPopup = true;
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        try {
            UrlList = await UrlService.GetUrlList();
        }
        catch (Exception exe)
        {
            errorMessage = exe.Message;
            ShowErrorPopup = true;
        }
    }

    [Authorize(Roles = "admin")]
    void CreateShortUrl()
    {
        shortUrlRequest = new ShortUrlRequest();
        ShowCreatePopup = true;
    }


    [Authorize(Roles = "admin")]
    void EditShortUrl(ShortUrlEntity urlEntity)
    {
        editedUrl = urlEntity;
        ShowEditPopup = true;
    }

    [Authorize(Roles = "admin")]
    public async Task ArchiveShortUrl(ShortUrlEntity urlEntity)
    {
        try {
            await UrlService.ArchiveShortUrl(urlEntity);
            UrlList = await UrlService.GetUrlList();
        }
        catch (Exception exe)
        {
            errorMessage = exe.Message;
            ShowErrorPopup = true;
        }
     }


    [Inject] public IJSRuntime JsRuntime { get; set; }
    public async Task CopyToClipboardAsync(string url)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", url);
    }

}